JPA : Java Persistence API의 약자, 자바 객체를 관계형 데이터베이스에 영속적으로 저장하고 
조회할 수 있는 ORM 기술에 대한 표준 명세를 의미함. 

@GetMapping: 조회할 때 사용(HTTP GET 요청을 처리하는데 사용)
@PostMapping: 등록, 생성할 때 사용함(HTTP POST 요청을 처리하는데 사용)
@PathVariable: URL 경로에 포함된 값을 변수로 바인딩할 때 사용, 경로에 있는 값을 읽어오는 역할 
@RequestBody: body에 있는 Json 데이터를 자바 객체로 변환해줌. 
예) public Member create(@RequestBody Member member) 

JPARepository : 인터페이스 중 하나로 데이터베이를 조작하기 위한 메서드들을 제공함,
추가, 조회, 수정, 삭제의 findAll(), findById(), save() 등의 메서드들을 사용할 수 있습니다.
덕분에 복잡한 JDBC(Java DataBase Connectivity) 코드 작성 x

Member 클래스

@Entity // 이 클래스가 JPA에서 DB 테이블로 매핑됨을 의미함, Spring Data JPA가 테이블을 만들어 줌
@Getter @Setter // 각 필드에 대해 자동으로 getter(), setter() 메서드를 생성해줌.
@NoArgsConstructor // 기본 생성자(매개변수 없는 생성자)를 자동 생성해줌.
@AllArgsConstructor // 모든 필드를 매게변수로 받는 생성자 자동 생성.

MemberRepository 인터페이스

JpaRepository<Member, Long> -> Member.Long을 가져옴(?)

Optional<T> -> java 8+ 부터 지원되는 Wapper 클래스, 보통 데이터를 조회할 경우
데이터가 없을 수도 있음 -> 이 때 Optional을 사용하면 있을수도, 없을수도 있다를 명시적으로 표현 가능.
장점: 널 체크 강제, 더 안전하고 명확한 코드 작성가능.

MemberController 클래스

@RestController: 해당 클래스를 REST API 컨트롤러로 인식하게 함, 응답이 json 형태로 반환됨.

@RequestMapping("/api/members"): 해당 컨트롤러 모든 메서드에 대해 공통 URL 경로를 지정함,
아래 모든 API들이 /api/members로 시작하게 됨.
